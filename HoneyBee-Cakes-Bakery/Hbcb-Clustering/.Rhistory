} else {
install.packages("corrplot", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## ggcorrplot ----
if (require("ggcorrplot")) {
require("ggcorrplot")
} else {
install.packages("ggcorrplot", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## caret ----
if (require("caret")) {
require("caret")
} else {
install.packages("caret", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## dplyr ----
if (require("dplyr")) {
require("dplyr")
} else {
install.packages("dplyr", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## tidyverse ----
if (require("tidyverse")) {
require("tidyverse")
} else {
install.packages("tidyverse", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
library(readr)
Hbcb_training_data <- read_csv("Hbcb-training-data.csv")
View(Hbcb_training_data)
str(Hbcb_training_data)
dim(Hbcb_training_data)
head(Hbcb_training_data)
summary(Hbcb_training_data)
# STEP 3 Training and Saving Clustering Algorithm
set.seed(7)
# Perform k-means clustering
model_to_predict_clusters <- kmeans(Hbcb_training_data[, c(3, 4)], centers = 4, nstart = 20)
# Add the cluster assignments to the dataset
Hbcb_training_data$cluster <- model_to_predict_clusters$cluster
# Visualize the clustering results (modify this based on your requirements)
# For example, if you want to visualize column 3 against column 4:
plot(productId ~ quantity,
data = Hbcb_training_data,
col = Hbcb_training_data$cluster,
main = "Customer Segmentation")
train_control <- trainControl(method = "cv", number = 5)
Hbcb_training_data  <- Hbcb_training_data %>% mutate(cluster = as.factor(cluster))
Hbcb_training_data  <- Hbcb_training_data %>% select(productId, quantity, cluster)
model_to_predict_clusters <-
train(cluster ~ ., data = Hbcb_training_data, method = "svmRadial",
metric = "Accuracy", trControl = train_control)
# Saving the k-means model
saveRDS(model_to_predict_clusters, "Hbcb_customer_segmentation_model.rds")
# The saved model can then be loaded later
model_to_predict_clusters <- readRDS("Hbcb_customer_segmentation_model.rds")
.libPaths()
# Then execute the following command to see which packages are available in
# each library:
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## caret ----
if (require("caret")) {
require("caret")
} else {
install.packages("caret", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
#load model
model_to_predict_clusters <- readRDS("Hbcb_customer_segmentation_model.rds")
predict_cluster <- function(arg_productId, arg_quantity) {
# Create a data frame using the arguments
to_be_predicted <- data.frame(productId = as.numeric(arg_productId), quantity = as.numeric(arg_quantity))
# Perform k-means clustering on the input data to obtain clusters
# to_be_predicted$cluster <- predict(model_to_predict_clusters, to_be_predicted)
# Predict the cluster using the model_to_predict_clusters
predict(model_to_predict_clusters, newdata = to_be_predicted)
}
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 2. Process a Plumber API
# This allows us to process a plumber API
api <- plumber::plumb("Hbcb-PlumberAPI.R")
api$run(host = "127.0.0.1", port = 5022)
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## httr ----
if (require("httr")) {
require("httr")
} else {
install.packages("httr", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## jsonlite ----
if (require("jsonlite")) {
require("jsonlite")
} else {
install.packages("jsonlite", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# We set this as a constant port 5022 running on localhost
base_url <- "http://127.0.0.1:5022/cluster"
# We create a named list called "params".
# It contains an element for each parameter we need to specify.
params <- list(arg_productId = 26, arg_quantity = 2)
query_url <- httr::modify_url(url = base_url, query = params)
# This is how the URL looks
# Note: You can go to the URL using a browser and as long as the API is running,
# you will get a response.
print(query_url)
# STEP 3. Make the request for the model prediction through the API ----
# The results of the model prediction through the API can also be obtained in R
model_prediction <- GET(query_url)
# Notice that the result displays additional JSON content, e.g., [[1]]
content(model_prediction)
# We can print the specific result as follows:
content(model_prediction)[[1]]
# STEP 4. Parse the response into the right format ----
# We need to extract the results from the default JSON list format into
# a non-list text format:
model_prediction_raw <- content(model_prediction, as = "text",
encoding = "utf-8")
jsonlite::fromJSON(model_prediction_raw)
predict_cluster <-
function(arg_productId, arg_quantity) {
base_url <- "http://127.0.0.1:5022/cluster"
params <- list(arg_productId = arg_productId, arg_quantity = arg_quantity)
query_url <- modify_url(url = base_url, query = params)
model_prediction <- GET(query_url)
model_prediction_raw <- content(model_prediction, as = "text",
encoding = "utf-8")
jsonlite::fromJSON(model_prediction_raw)
}
get_cluster_prediction(26, 2)
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## httr ----
if (require("httr")) {
require("httr")
} else {
install.packages("httr", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## jsonlite ----
if (require("jsonlite")) {
require("jsonlite")
} else {
install.packages("jsonlite", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# We set this as a constant port 5022 running on localhost
base_url <- "http://127.0.0.1:5022/cluster"
# We create a named list called "params".
# It contains an element for each parameter we need to specify.
params <- list(arg_productId = 26, arg_quantity = 2)
query_url <- httr::modify_url(url = base_url, query = params)
# This is how the URL looks
# Note: You can go to the URL using a browser and as long as the API is running,
# you will get a response.
print(query_url)
# STEP 3. Make the request for the model prediction through the API ----
# The results of the model prediction through the API can also be obtained in R
model_prediction <- GET(query_url)
# This is how the URL looks
# Note: You can go to the URL using a browser and as long as the API is running,
# you will get a response.
print(query_url)
# STEP 3. Make the request for the model prediction through the API ----
# The results of the model prediction through the API can also be obtained in R
model_prediction <- GET(query_url)
# STEP 4. Parse the response into the right format ----
# We need to extract the results from the default JSON list format into
# a non-list text format:
model_prediction_raw <- content(model_prediction, as = "text",
encoding = "utf-8")
query_url <- httr::modify_url(url = base_url, query = params)
# This is how the URL looks
# Note: You can go to the URL using a browser and as long as the API is running,
# you will get a response.
print(query_url)
# STEP 3. Make the request for the model prediction through the API ----
# The results of the model prediction through the API can also be obtained in R
model_prediction <- GET(query_url)
# Notice that the result displays additional JSON content, e.g., [[1]]
content(model_prediction)
# We can print the specific result as follows:
content(model_prediction)[[1]]
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 2. Process a Plumber API
# This allows us to process a plumber API
api <- plumber::plumb("Hbcb-PlumberAPI.R")
api$run(host = "127.0.0.1", port = 5022)
api$run(host = "127.0.0.1", port = 5022)
api$run(host = "127.0.0.1", port = 5022)
api$run(host = "127.0.0.1", port = 5022)
api$run(host = "127.0.0.1", port = 5022)
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## httr ----
if (require("httr")) {
require("httr")
} else {
install.packages("httr", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## jsonlite ----
if (require("jsonlite")) {
require("jsonlite")
} else {
install.packages("jsonlite", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# We set this as a constant port 5022 running on localhost
base_url <- "http://127.0.0.1:5022/cluster"
# We create a named list called "params".
# It contains an element for each parameter we need to specify.
params <- list(arg_productId = 26, arg_quantity = 2)
query_url <- httr::modify_url(url = base_url, query = params)
# This is how the URL looks
# Note: You can go to the URL using a browser and as long as the API is running,
# you will get a response.
print(query_url)
# STEP 3. Make the request for the model prediction through the API ----
# The results of the model prediction through the API can also be obtained in R
model_prediction <- GET(query_url)
api$run(host = "127.0.0.1", port = 5022)
api$run(host = "127.0.0.1", port = 5022)
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and Load the Required Packages ----
## readr ----
if (require("readr")) {
require("readr")
} else {
install.packages("readr", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## naniar ----
if (require("naniar")) {
require("naniar")
} else {
install.packages("naniar", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## ggplot2 ----
if (require("ggplot2")) {
require("ggplot2")
} else {
install.packages("ggplot2", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## corrplot ----
if (require("corrplot")) {
require("corrplot")
} else {
install.packages("corrplot", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## ggcorrplot ----
if (require("ggcorrplot")) {
require("ggcorrplot")
} else {
install.packages("ggcorrplot", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## caret ----
if (require("caret")) {
require("caret")
} else {
install.packages("caret", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## dplyr ----
if (require("dplyr")) {
require("dplyr")
} else {
install.packages("dplyr", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## tidyverse ----
if (require("tidyverse")) {
require("tidyverse")
} else {
install.packages("tidyverse", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
library(readr)
Hbcb_training_data <- read_csv("Hbcb-training-data.csv")
str(Hbcb_training_data)
dim(Hbcb_training_data)
head(Hbcb_training_data)
summary(Hbcb_training_data)
# STEP 3 Training and Saving Clustering Algorithm
set.seed(7)
# Perform k-means clustering
model_to_predict_clusters <- kmeans(Hbcb_training_data[, c(3, 4)], centers = 4, nstart = 20)
# Add the cluster assignments to the dataset
Hbcb_training_data$cluster <- model_to_predict_clusters$cluster
# Visualize the clustering results (modify this based on your requirements)
# For example, if you want to visualize column 3 against column 4:
plot(productId ~ quantity,
data = Hbcb_training_data,
col = Hbcb_training_data$cluster,
main = "Customer Segmentation")
train_control <- trainControl(method = "cv", number = 5)
Hbcb_training_data  <- Hbcb_training_data %>% mutate(cluster = as.factor(cluster))
Hbcb_training_data  <- Hbcb_training_data %>% select(productId, quantity, cluster)
model_to_predict_clusters <-
train(cluster ~ ., data = Hbcb_training_data, method = "svmRadial",
metric = "Accuracy", trControl = train_control)
# Saving the k-means model
saveRDS(model_to_predict_clusters, "Hbcb_customer_segmentation_model.rds")
# The saved model can then be loaded later
model_to_predict_clusters <- readRDS("Hbcb_customer_segmentation_model.rds")
.libPaths()
# Then execute the following command to see which packages are available in
# each library:
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## caret ----
if (require("caret")) {
require("caret")
} else {
install.packages("caret", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
#load model
model_to_predict_clusters <- readRDS("Hbcb_customer_segmentation_model.rds")
predict_cluster <- function(arg_productId, arg_quantity) {
# Create a data frame using the arguments
to_be_predicted <- data.frame(productId = as.numeric(arg_productId), quantity = as.numeric(arg_quantity))
# Perform k-means clustering on the input data to obtain clusters
# to_be_predicted$cluster <- predict(model_to_predict_clusters, to_be_predicted)
# Predict the cluster using the model_to_predict_clusters
predict(model_to_predict_clusters, newdata = to_be_predicted)
}
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## plumber ----
if (require("plumber")) {
require("plumber")
} else {
install.packages("plumber", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 2. Process a Plumber API
# This allows us to process a plumber API
api <- plumber::plumb("Hbcb-PlumberAPI.R")
api$run(host = "127.0.0.1", port = 5022)
.libPaths()
lapply(.libPaths(), list.files)
if (require("languageserver")) {
require("languageserver")
} else {
install.packages("languageserver", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# STEP 1. Install and load the required packages ----
## httr ----
if (require("httr")) {
require("httr")
} else {
install.packages("httr", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
## jsonlite ----
if (require("jsonlite")) {
require("jsonlite")
} else {
install.packages("jsonlite", dependencies = TRUE,
repos = "https://cloud.r-project.org")
}
# We set this as a constant port 5022 running on localhost
base_url <- "http://127.0.0.1:5022/cluster"
# We create a named list called "params".
# It contains an element for each parameter we need to specify.
params <- list(arg_productId = 26, arg_quantity = 2)
query_url <- httr::modify_url(url = base_url, query = params)
# This is how the URL looks
# Note: You can go to the URL using a browser and as long as the API is running,
# you will get a response.
print(query_url)
# STEP 3. Make the request for the model prediction through the API ----
# The results of the model prediction through the API can also be obtained in R
model_prediction <- GET(query_url)
# Notice that the result displays additional JSON content, e.g., [[1]]
content(model_prediction)
# We can print the specific result as follows:
content(model_prediction)[[1]]
# STEP 4. Parse the response into the right format ----
# We need to extract the results from the default JSON list format into
# a non-list text format:
model_prediction_raw <- content(model_prediction, as = "text",
encoding = "utf-8")
jsonlite::fromJSON(model_prediction_raw)
predict_cluster <-
function(arg_productId, arg_quantity) {
base_url <- "http://127.0.0.1:5022/cluster"
params <- list(arg_productId = arg_productId, arg_quantity = arg_quantity)
query_url <- modify_url(url = base_url, query = params)
model_prediction <- GET(query_url)
model_prediction_raw <- content(model_prediction, as = "text",
encoding = "utf-8")
jsonlite::fromJSON(model_prediction_raw)
}
get_cluster_prediction(26, 2)
